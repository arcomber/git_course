git somecommand (-p|--patch) [<id>] [--] [<paths>...]

- or -- - set a flag

| represents or - eg above could use either -p or --patch

[] - optional items surrounded by square brackets.

<> - placeholders surrounded by angle brackets

() - grouping - to disambiguate - ie above saying you must set either -p or --patch flag

-- - disambiguate - above to clarify you are specifying a path

... - multiple occurrences are possible.

git version 2.16.3.window.1

user = Angus Comber
email = angus@iteloffice.com
editor - set to emacs



working tree - view and edit files to prepare for next commit.

staging area / index - contains a list of files you want to next commit.

git add - to add files to the staging area.


myproject/
 working tree
 /.git

.git is hidden dir - staging area and local repo located here.

working tree - files being prepared for next commit

if yo delete .git folder - delete local repo and staging area


git add . - adds all untracked files

be careful with git add . - can easily drag n files you don't want in commit



..

create a remote repository

bitbucket, github, on site storage

a remore repo is a bare repo.  has no working tree or staging area.

remore repo names end in .git by convention

on remote storage / server, git init --bare


or for github go onto github and create a new repository.

on github you can't do the git init --bare I don't think so you setup first there, and then clone it to local

git clone https://github.com/arcomber/git_course.git

then you can edit some files etc. I added a git notes.txt file and committed.

then magically git seems to remember where you cloned from and so when you push it knows where to push to.

just do : git push


...
Scenario 2 - already have a local repo

git remote add <name> <url>

eg create a repo on github

then locally:
git remote add origin https://github.com/arcomber/git_course.git

by default there is a single branch called master

git push purpose:
1) share your work with other team members
2) backup of work

full cmd: git push origin master

but can use defaults/previous : just git push

git push -u origin master

-u - sets up tracking relationship between 

-u is like setting --set-upstream

remote repo is name origin.
branch is named master


...
review of working with a remote repo

git clone - if you don't yet have a local repo.
git remote add - if you have a local repo already

...

graph
-----

a way to model connected things.

node and edge

directed graph - arrows to show direction.

grandparent ->parent->you

acyclic - no cycles

git is a DAG

can do merges - but no cycles in git.

arrows point to a commits parents.

commits and relationships between them form the projects history.

git log --oneline --graph


git uses a DAG to represent commit history.

commits point to their parent commits.


...

git objects - 4 types of things
1. commit object - user info, commit msg, ref to parent, ref to root tree of project - that is all that git needs to rebuild the full contents of the commit.

2. annotated tag - ref to a specific commit

3. tree - list of filenames inside of a directory

4. blob - contents of a file in the project.


git id - name of a git object.

40 char hex string. git id also known as object ids, SHA-1s, hashes and checksum.

that hex string is the name of a git object.

mathematical computation based ont he content.

exact same content will result in same sha-1 value.

small change in content results in a big difference in sha-1 string.

git hash-object <file> - to create a SHA-1 for any content

echo "hi">filea.txt
git hash-object filea.txt
$ git hash-object filea.txt
45b983be36b73c0788dc9cbcb76cbb80fc7bb057
$ echo "hi ">filea.txt
$ git hash-object filea.txt
0b5d6ed361eb779d2212ec820ea5568f3af7762b


git hash-object is a low-level command - not often used but useful for scripts.

git object names are also known as git ids.


master is the default name of the main branch in the repo.


HEAD is a reference to the current commit.

NOTE - not necessarily the tip of the branch.  

only 1 HEAD per repo.


x-x-x
    ^
    |
   HEAD


tag - eg can mark a commit v1.0

sourcetree - has a push tag option - so can also push any tags you have locally set.

tags are not automatically pushed to remote repositories.


References
----------

branch labels implemented as references.  branch v branch label.

branch is implemented as a branch label at tip.

so in git branches are simple to implement and use very few resources.  just have a label pointing to tip of branch and then all nodes point to parent - until you eventually get to root of branch.


HEAD points to the current commit



~ or ~1 = parent

~2 or ~~ = parent's parent

caret ^ - show parent 1 or parent 2

example:

git show master^ - shows parent - same as using ~

but can also do git show master^2 - but only works if there is a 2nd parent.

can even combine ~ and ^

types of tag
1. lightweight - simple ref
2. annotated tag - can include metadata - eg text, author etc

can even signoff on annotated tags

git tag - to see what tags in repo

git show v0.1

git tag v0.1

by default will tag where you currently are - the HEAD

could tag parent of HEAD by using git tag HEAD~


annotated tagging:

git tag -a -m "my msg" v0.1

can also use - a with -F <file>

- a - means annotated tag


git push <remote> <tagname>

or to push all your tags

git push origin --tags




